<?php

namespace Lagdo\Adminer\Db;

use Exception;

/**
 * Proxy to calls to the Adminer functions
 */
class ExportProxy
{
    /**
     * The dump options
     *
     * @var array
     */
    protected $options;

    /**
     * The queries generated by the dump
     *
     * @var array
     */
    protected $queries = [];

    /**
     * Get data for export
     *
     * @param string $database      The database name
     *
     * @return array
     */
    public function getExportOptions(string $database)
    {
        global $adminer, $jush;

        $db_style = ['', 'USE', 'DROP+CREATE', 'CREATE'];
        $table_style = ['', 'DROP+CREATE', 'CREATE'];
        $data_style = ['', 'TRUNCATE+INSERT', 'INSERT'];
        if($jush == 'sql')
        { //! use insertUpdate() in all drivers
            $data_style[] = 'INSERT+UPDATE';
        }
        // \parse_str($_COOKIE['adminer_export'], $row);
        // if(!$row) {
            $row = [
                'output' => 'text',
                'format' => 'sql',
                'db_style' => ($database != '' ? '' : 'CREATE'),
                'table_style' => 'DROP+CREATE',
                'data_style' => 'INSERT',
            ];
        // }
        // if(!isset($row['events'])) { // backwards compatibility
            $row['routines'] = $row['events'] = true; // ($_GET['dump'] == '');
            $row['triggers'] = $row['table_style'];
        // }
        $options = [
            'output' => [
                'label' => \adminer\lang('Output'),
                'options' => $adminer->dumpOutput(),
                'value' => $row['output'],
            ],
            'format' => [
                'label' => \adminer\lang('Format'),
                'options' => $adminer->dumpFormat(),
                'value' => $row['format'],
            ],
            'table_style' => [
                'label' => \adminer\lang('Tables'),
                'options' => $table_style,
                'value' => $row['table_style'],
            ],
            'auto_increment' => [
                'label' => \adminer\lang('Auto Increment'),
                'value' => 1,
                'checked' => $row['auto_increment'] ?? false,
            ],
            'data_style' => [
                'label' => \adminer\lang('Data'),
                'options' => $data_style,
                'value' => $row['data_style'],
            ],
        ];
        if($jush !== 'sqlite')
        {
            $options['db_style'] = [
                'label' => \adminer\lang('Database'),
                'options' => $db_style,
                'value' => $row['db_style'],
            ];
            if(\adminer\support('routine'))
            {
                $options['routines'] = [
                    'label' => \adminer\lang('Routines'),
                    'value' => 1,
                    'checked' => $row['routines'],
                ];
            }
            if(\adminer\support('event'))
            {
                $options['events'] = [
                    'label' => \adminer\lang('Events'),
                    'value' => 1,
                    'checked' => $row['events'],
                ];
            }
        }
        if(\adminer\support('trigger'))
        {
            $options['triggers'] = [
                'label' => \adminer\lang('Triggers'),
                'value' => 1,
                'checked' => $row['triggers'],
            ];
        }

        $TABLE = '';
        $results = [
            'options' => $options,
            'prefixes' => [],
        ];
        if(($database))
        {
            $tables = [
                'headers' => [\adminer\lang('Tables'), \adminer\lang('Data')],
                'details' => [],
            ];
            $tables_list = \adminer\tables_list();
            foreach($tables_list as $name => $type)
            {
                $prefix = \preg_replace('~_.*~', '', $name);
                //! % may be part of table name
                $checked = ($TABLE == "" || $TABLE == (\substr($TABLE, -1) == "%" ? "$prefix%" : $name));
                // $results['prefixes'][$prefix]++;

                $tables['details'][] = \compact('name', 'type', 'prefix', 'checked');
            }
            $results['tables'] = $tables;
        }
        else
        {
            $databases = [
                'headers' => [\adminer\lang('Database')],
                'details' => [],
            ];
            $databases_list = $adminer->databases(false) ?? [];
            foreach($databases_list as $name)
            {
                if(!\adminer\information_schema($name))
                {
                    $prefix = \preg_replace('~_.*~', '', $name);
                    // $results['prefixes'][$prefix]++;

                    $databases['details'][] = \compact('prefix', 'name');
                }
            }
            $results['databases'] = $databases;
        }

        $results['options'] = $options;
        $results['labels'] = [
            'export' => \adminer\lang('Export'),
        ];
        return $results;
    }

    /**
     * Dump routines and events in the connected database
     *
     * @param string $database      The database name
     *
     * @return void
     */
    protected function dumpRoutinesAndEvents(string $database)
    {
        global $connection;

        // From dump.inc.php
        $style = $this->options["db_style"];
        $queries = [];

        if($this->options["routines"])
        {
            $sql = "SHOW FUNCTION STATUS WHERE Db = " . \adminer\q($database);
            foreach(\adminer\get_rows($sql, null, "-- ") as $row)
            {
                $sql = "SHOW CREATE FUNCTION " . \adminer\idf_escape($row["Name"]);
                $create = \adminer\remove_definer($connection->result($sql, 2));
                $queries[] = \adminer\set_utf8mb4($create);
                if($style != 'DROP+CREATE')
                {
                    $queries[] = "DROP FUNCTION IF EXISTS " . \adminer\idf_escape($row["Name"]) . ";;";
                }
                $queries[] = "$create;;\n";
            }
            $sql = "SHOW PROCEDURE STATUS WHERE Db = " . \adminer\q($database);
            foreach(\adminer\get_rows($sql, null, "-- ") as $row)
            {
                $sql = "SHOW CREATE PROCEDURE " . \adminer\idf_escape($row["Name"]);
                $create = \adminer\remove_definer($connection->result($sql, 2));
                $queries[] = \adminer\set_utf8mb4($create);
                if($style != 'DROP+CREATE')
                {
                    $queries[] = "DROP PROCEDURE IF EXISTS " . \adminer\idf_escape($row["Name"]) . ";;";
                }
                $queries[] = "$create;;\n";
            }
        }

        if($this->options["events"])
        {
            foreach(\adminer\get_rows("SHOW EVENTS", null, "-- ") as $row)
            {
                $sql = "SHOW CREATE EVENT " . \adminer\idf_escape($row["Name"]);
                $create = \adminer\remove_definer($connection->result($sql, 3));
                $queries[] = \adminer\set_utf8mb4($create);
                if($style != 'DROP+CREATE')
                {
                    $queries[] = "DROP EVENT IF EXISTS " . \adminer\idf_escape($row["Name"]) . ";;";
                }
                $queries[] = "$create;;\n";
            }
        }

        if(\count($queries) > 0)
        {
            $this->queries[] = "DELIMITER ;;\n";
            foreach($queries as $query)
            {
                $this->queries[] = $query;
            }
            $this->queries[] = "DELIMITER ;;\n";
        }
    }

    /**
     * Print CSV row
     *
     * @param array  $row
     *
     * @return void
     */
    protected function dumpCsv(array $row)
    {
        // From functions.inc.php
        foreach($row as $key => $val)
        {
            if(\preg_match('~["\n,;\t]|^0|\.\d*0$~', $val) || $val === "")
            {
                $this->queries[] = '"' . \str_replace('"', '""', $val) . '"';
            }
        }
        // echo implode(($this->options["format"] == "csv" ? "," : ($this->options["format"] == "tsv" ? "\t" : ";")), $row) . "\r\n";
    }

    /**
     * Export table structure
     *
     * @param string $table
     * @param string $style
     * @param int    $is_view       0 table, 1 view, 2 temporary view table
     *
     * @return null prints data
     */
    protected function dumpTable(string $table, string $style, int $is_view = 0)
    {
        // From adminer.inc.php
        if($this->options['format'] != "sql")
        {
            $this->queries[] = "\xef\xbb\xbf"; // UTF-8 byte order mark
            if($style)
            {
                $this->dumpCsv(\array_keys(\adminer\fields($table)));
            }
            return;
        }

        if($is_view == 2)
        {
            $fields = [];
            foreach(\adminer\fields($table) as $name => $field)
            {
                $fields[] = \adminer\idf_escape($name) . ' ' . $field['full_type'];
            }
            $create = "CREATE TABLE " . \adminer\table($table) . " (" . \implode(", ", $fields) . ")";
        }
        else
        {
            $create = \adminer\create_sql($table, $this->options['auto_increment'], $style);
        }
        \adminer\set_utf8mb4($create);
        if($style && $create)
        {
            if($style == "DROP+CREATE" || $is_view == 1)
            {
                $this->queries[] = "DROP " . ($is_view == 2 ? "VIEW" : "TABLE") .
                    " IF EXISTS " . \adminer\table($table) . ';';
            }
            if($is_view == 1)
            {
                $create = \adminer\remove_definer($create);
            }
            $this->queries[] = $create . ';';
        }
    }

    /**
     * Dump tables and views in the connected database
     *
     * @param string $database      The database name
     * @param array  $tables        The tables to dump
     *
     * @return array
     */
    protected function dumpTablesAndViews(string $database, array $tables)
    {
        global $adminer;

        if(!$this->options["table_style"] && !$this->options["data_style"])
        {
            return [];
        }

        $views = [];
        $dbTables = \adminer\table_status('', true);
        foreach($dbTables as $name => $table_status)
        {
            $table = true; // ($tables[0] === '*' || \in_array($name, $this->options["tables"]));
            $data = false; // ($tables[0] === '*' || \in_array($name, $this->options["data"]));
            if($table || $data)
            {
                // if($ext == "tar")
                // {
                //     $tmp_file = new TmpFile;
                //     ob_start([$tmp_file, 'write'], 1e5);
                // }

                $this->dumpTable($name, ($table ? $this->options["table_style"] : ""),
                    (\adminer\is_view($table_status) ? 2 : 0));
                if(\adminer\is_view($table_status))
                {
                    $views[] = $name;
                }
                // elseif($data)
                // {
                //     $fields = \adminer\fields($name);
                //     $adminer->dumpData($name, $this->options["data_style"], "SELECT *" . convert_fields($fields, $fields) . " FROM " . table($name));
                // }
                if($this->options['is_sql'] && $this->options["triggers"] && $table &&
                    ($triggers = \adminer\trigger_sql($name)))
                {
                    $this->queries[] = "DELIMITER ;";
                    $this->queries[] = $triggers;
                    $this->queries[] = "DELIMITER ;";
                }

                // if($ext == "tar")
                // {
                //     ob_end_flush();
                //     tar_file((DB != "" ? "" : "$db/") . "$name.csv", $tmp_file);
                // } else
                if($this->options['is_sql'])
                {
                    $this->queries[] = '';
                }
            }
        }

        // add FKs after creating tables (except in MySQL which uses SET FOREIGN_KEY_CHECKS=0)
        if(\function_exists('foreign_keys_sql'))
        {
            foreach($dbTables as $name => $table_status)
            {
                $table = true; // (DB == "" || \in_array($name, $this->options["tables"]));
                if($table && !\adminer\is_view($table_status))
                {
                    $this->queries[] = \adminer\foreign_keys_sql($name);
                }
            }
        }

        foreach($views as $view)
        {
            $this->dumpTable($view, $this->options["table_style"], 1);
        }

        // if($ext == "tar") {
        //     $this->queries[] = pack("x512");
        // }
    }

    /**
     * Export databases
     *
     * @param array  $databases     The databases to dump
     * @param array  $tables        The tables to dump
     * @param array  $dumpOptions   The export options
     *
     * @return array
     */
    public function exportDatabases(array $databases, array $tables, array $dumpOptions)
    {
        global $adminer, $connection, $drivers, $jush;

        // From dump.inc.php
        // $tables = array_flip($dumpOptions["tables"]) + array_flip($dumpOptions["data"]);
        // $ext = dump_headers((count($tables) == 1 ? key($tables) : DB), (DB == "" || count($tables) > 1));
        $dumpOptions['is_sql'] = \preg_match('~sql~', $dumpOptions["format"]);
        $this->options = $dumpOptions;

        $headers = null;
        if($this->options['is_sql'])
        {
            $headers = [
                'version' => \adminer\version(),
                'driver' => $drivers[DRIVER],
                'server' => \str_replace("\n", " ", $connection->server_info),
                'sql' => false,
                'data_style' => false,
            ];
            if($jush == "sql")
            {
                $headers['sql'] = true;
                if(isset($dumpOptions["data_style"]))
                {
                    $headers['data_style'] = true;
                }
                // Set some options in database server
                $connection->query("SET time_zone = '+00:00'");
                $connection->query("SET sql_mode = ''");
            }
        }

        $style = $dumpOptions["db_style"];

        foreach($databases as $db)
        {
            // $adminer->dumpDatabase($db);
            if($connection->select_db($db))
            {
                $sql = "SHOW CREATE DATABASE " . \adminer\idf_escape($db);
                if($this->options['is_sql'] && \preg_match('~CREATE~', $style) &&
                    ($create = $connection->result($sql, 1)))
                {
                    \adminer\set_utf8mb4($create);
                    if($style == "DROP+CREATE")
                    {
                        $this->queries[] = "DROP DATABASE IF EXISTS " . \adminer\idf_escape($db) . ";";
                    }
                    $this->queries[] = "$create;";
                }
                if($this->options['is_sql'])
                {
                    if($style)
                    {
                        if(($query = \adminer\use_sql($db)))
                        {
                            $this->queries[] = $query . ";";
                        }
                        $this->queries[] = ''; // Empty line
                    }

                    $this->dumpRoutinesAndEvents($db);
                }

                $this->dumpTablesAndViews($db, $tables);
            }
        }

        if($this->options['is_sql'])
        {
            $this->queries[] = "-- " . $connection->result("SELECT NOW()");
        }

        return [
            'headers' => $headers,
            'queries' => $this->queries,
        ];
    }
}
